#define CLOCK 12
#define D0 2
#define D1 3
#define D2 4
#define D3 5
#define D4 6
#define D5 7
#define D6 8
#define D7 9

#define RESET A1
#define WAIT A2
#define DMA_IN A0
#define DMA_OUT A3
#define SC1 A4


#define RESET_DELAY 750
#define BOOT_CLOCK_SPEED 0x0004
#define RUN_CLOCK_SPEED  0x0100


// use OC1B // D10 for clocking the 1802
// set up timer 1 to toggle OC1B
#define OC1B 10

byte dataBus [] = {D0, D1, D2, D3, D4, D5, D6, D7}; 
int count = 0;
byte byteOnBus = 0x00;


void setup() {
  
  Serial.begin(9600);
  Serial.println("Setting up pins...");
  
  pinMode(CLOCK, OUTPUT);
  digitalWrite(CLOCK, LOW);
  pinMode(RESET, OUTPUT);
  pinMode(WAIT, OUTPUT);
  pinMode(DMA_IN, OUTPUT);
  pinMode(DMA_OUT, OUTPUT);
  pinMode(SC1, INPUT);
  pinMode(OC1B, OUTPUT); // will be used as 1802 clock
  
  digitalWrite(DMA_IN, HIGH);  // no DMA for now
  digitalWrite(DMA_OUT, HIGH);
  digitalWrite(WAIT, HIGH);
  digitalWrite(RESET, HIGH);
  // timer 1 setup for clock 

  
  TCCR1A = (1 << COM1B0) | (0 << COM1B1) | (0 << WGM10); // toggle OC1B on compare match
  TCCR1B = (1 << WGM12) | (1 << CS11) ;  // CTC Mode,  clock / 8
  OCR1A = BOOT_CLOCK_SPEED;  // sets period via compare match

top:
  Serial.println("Resetting the 1802");
  // reset the 1802 to load mode 
  digitalWrite(WAIT, LOW);
  digitalWrite(RESET, LOW);
  delay(RESET_DELAY);
  digitalWrite(WAIT,HIGH);
  delay(RESET_DELAY);
  digitalWrite(WAIT, LOW);

  Serial.println("1802 should now be in LOAD mode...");
  Serial.println("Booting Program...");
  
  aquireBus();

unsigned char test_bios_bin[] = {
  0x30, 0xcf, 0xd3, 0xe2, 0x96, 0x73, 0x86, 0x73, 0x93, 0xb6, 0x83, 0xa6,
  0x46, 0xb3, 0x46, 0xa3, 0x30, 0x02, 0xd3, 0x96, 0xb3, 0x86, 0xa3, 0xe2,
  0x12, 0x72, 0xa6, 0xf0, 0xb6, 0x30, 0x12, 0x8a, 0x3a, 0x25, 0x9a, 0x32,
  0x28, 0x2a, 0x30, 0x1f, 0xd5, 0xf8, 0x00, 0xba, 0xf8, 0x00, 0xbb, 0xf8,
  0x4a, 0xab, 0xeb, 0x62, 0xf8, 0x01, 0xaa, 0xd4, 0x00, 0x1f, 0x0b, 0x3a,
  0x32, 0xf8, 0x00, 0xba, 0xf8, 0x54, 0xaa, 0xd4, 0x00, 0x7a, 0xd4, 0x00,
  0xa7, 0xd5, 0x30, 0x30, 0x30, 0x38, 0x08, 0x01, 0x06, 0x0c, 0x02, 0x00,
  0x31, 0x38, 0x30, 0x32, 0x20, 0x43, 0x4f, 0x53, 0x4d, 0x41, 0x43, 0x20,
  0x4d, 0x69, 0x63, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x20,
  0x42, 0x49, 0x4f, 0x53, 0x2c, 0x20, 0x43, 0x46, 0x20, 0x32, 0x30, 0x32,
  0x33, 0x00, 0xf8, 0x00, 0xbb, 0xf8, 0xa5, 0xab, 0xf8, 0x00, 0x5b, 0xea,
  0xf8, 0x00, 0xbb, 0xf8, 0xa5, 0xab, 0x0a, 0x32, 0xa4, 0x63, 0x0b, 0xfc,
  0x01, 0x5b, 0xeb, 0xf8, 0x10, 0xf5, 0x3b, 0x83, 0xf8, 0x00, 0xbb, 0xf8,
  0xa6, 0xab, 0xf8, 0x18, 0x5b, 0x62, 0x30, 0x83, 0xd5, 0x00, 0x00, 0xf8,
  0x00, 0xbb, 0xf8, 0xbc, 0xab, 0xf8, 0x01, 0x5b, 0xeb, 0x62, 0xf8, 0x00,
  0xba, 0xf8, 0x05, 0xaa, 0xd4, 0x00, 0x1f, 0xd5, 0x00, 0xf8, 0x00, 0xba,
  0x7b, 0xf8, 0x05, 0xaa, 0xd4, 0x00, 0x1f, 0x7a, 0xf8, 0x05, 0xaa, 0xd4,
  0x00, 0x1f, 0xd5, 0xf8, 0x07, 0xb2, 0xf8, 0xff, 0xa2, 0xf8, 0x00, 0xb4,
  0xf8, 0x03, 0xa4, 0xf8, 0x00, 0xb5, 0xf8, 0x13, 0xa5, 0xf8, 0x00, 0xb3,
  0xf8, 0xe8, 0xa3, 0xd3, 0xd4, 0x00, 0x29, 0xd4, 0x00, 0xbd, 0xf8, 0x01,
  0xba, 0xf8, 0x09, 0xaa, 0xd4, 0x00, 0x7a, 0xd4, 0x00, 0xa7, 0xf8, 0x01,
  0xba, 0xf8, 0x29, 0xaa, 0xd4, 0x00, 0x7a, 0xd4, 0x00, 0xa7, 0xc0, 0x00,
  0xeb, 0x4d, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20,
  0x69, 0x73, 0x20, 0x63, 0x6f, 0x6f, 0x6c, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
  0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x00, 0x54, 0x6f, 0x6f,
  0x20, 0x62, 0x61, 0x64, 0x20, 0x79, 0x6f, 0x75, 0x27, 0x72, 0x65, 0x20,
  0x6e, 0x6f, 0x74, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
  0x21, 0x21, 0x21, 0x21, 0x00
};
unsigned int test_bios_bin_len = 329;




  for(int i = 0; i < test_bios_bin_len; i++)
  {
    bootByte(test_bios_bin[i]);
  }

  
  releaseBus();
  Serial.println("Load Complete!");
  
  OCR1A = RUN_CLOCK_SPEED;  // set run speed, no need for slow clock on boot
 
 
  digitalWrite(WAIT, LOW);
  digitalWrite(RESET, LOW);
  digitalWrite(WAIT, HIGH);
  delay(RESET_DELAY);
  digitalWrite(WAIT, LOW);
  delay(RESET_DELAY);

  digitalWrite(RESET, HIGH);
  digitalWrite(WAIT, HIGH);
  Serial.println("Releasing the 1802...");


}

void loop() {
  byte readByte = readDataBus();
    if(readByte != 0xff)
    {
    Serial.print("Current byte on bus: ");
    Serial.println(readByte, HEX);
    }
   
 }
  

void bootByte(byte value)
{
  writeDataBus(value);
  delay(10);
  digitalWrite(DMA_IN, LOW);
  // wait for SC1 high
  while(digitalRead(SC1) == 0){
    ;
  }
  digitalWrite(DMA_IN, HIGH);
  // wait for SC1 LOW
    while(digitalRead(SC1) == 1){
    ;
  }
  
}

void aquireBus()
{
  pinMode(D0, OUTPUT);
  pinMode(D1, OUTPUT);
  pinMode(D2, OUTPUT);
  pinMode(D3, OUTPUT);
  pinMode(D4, OUTPUT);
  pinMode(D5, OUTPUT);
  pinMode(D6, OUTPUT);
  pinMode(D7, OUTPUT);
}

void releaseBus(){
  pinMode(D0, INPUT_PULLUP);
  pinMode(D1, INPUT_PULLUP);
  pinMode(D2, INPUT_PULLUP);
  pinMode(D3, INPUT_PULLUP);
  pinMode(D4, INPUT_PULLUP);
  pinMode(D5, INPUT_PULLUP);
  pinMode(D6, INPUT_PULLUP);
  pinMode(D7, INPUT_PULLUP); 
}

void writeDataBus(byte value){
  digitalWrite(D0, value & 1);
  digitalWrite(D1, (value >> 1) & 1);
  digitalWrite(D2, (value >> 2) & 1);
  digitalWrite(D3, (value >> 3) & 1);
  digitalWrite(D4, (value >> 4) & 1);
  digitalWrite(D5, (value >> 5) & 1);
  digitalWrite(D6, (value >> 6) & 1);
  digitalWrite(D7, (value >> 7) & 1);
}

byte readDataBus()
{
  byte value = 0;
  value |= digitalRead(D7) << 7;
  value |= (digitalRead(D6) << 6);
  value |= (digitalRead(D5) << 5);
  value |= (digitalRead(D4) << 4);
  value |= (digitalRead(D3) << 3);
  value |= (digitalRead(D2) << 2);
  value |= (digitalRead(D1) << 1);
  value |= digitalRead(D0); 
  return value;
}
